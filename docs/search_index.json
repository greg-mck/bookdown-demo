[["index.html", "Greg McKittrick Bookdown My Into", " Greg McKittrick Bookdown Greg McKittrick 2023-03-01 My Into This is an example of a bookdown document. Blah "],["apis-and-iteration.html", "Chapter 1 APIs and Iteration 1.1 APIs 1.2 NPS Visitation Data 1.3 Functions 1.4 Functionize API Pulls 1.5 Function Defaults 1.6 Iterations 1.7 For loops 1.8 Mapping", " Chapter 1 APIs and Iteration 1.0.1 Lesson Objectives In this lesson we will download data using an application programming interface (API), create our own functions, and iterate using for loops and map(). To fulfill these objectives we will be utilizing two park visitation data sets from the National Park Service (NPS): NPS-wide visitation data, and park unit-specific visitation data. There are seven exercises in this lesson that must be completed. 1.1 APIs An API is software that acts as an intermediary between an online data warehouse (or server) and its users (or clients). As data scientists, APIs provide us a way to request clean and nicely-formatted data that the server will then send to our local computers, all within our RStudio console! To work with APIs, we will need to use two new packages: httr, which allows us to communicate with the API‚Äôs server, and jsonlite, which allows us to work with one of the most common API data formats, JSON. Let‚Äôs go ahead and load in our packages for this lesson: library(tidyverse) library(httr) library(jsonlite) 1.2 NPS Visitation Data This week, we will be exploring NPS visitor use data across the NPS system as a whole, and and across specific park units. Like many institutions, NPS has a server that stores all of this information (as well as many other things), and an API for users to be able to access it. To utilize the NPS API in R, we first need to explore its API‚Äôs data structure. In almost every case, we use URLs to access specific data from APIs. To find the access URL for NPS visitation data, go to Stats Rest API - Documentation (though not very intuitive, the NPS API calls its visitation data set ‚ÄúStats‚Äù). Listed there you will see that all data associated with the ‚ÄúStats‚Äù data set can be accessed using the base URL https://irmaservices.nps.gov/v3/rest/stats. From there, you can tack on additional html text to access two different data sets: total/{year} and visitation. For starters, let‚Äôs try accessing the total/{year}. This data set gives us total monthly visitation across all NPS park units, for a user-selected year: https://irmaservices.nps.gov/v3/rest/stats/total/{YEAR} If you tried accessing that URL, you‚Äôll have noticed it doesn‚Äôt take you anywhere. This is because the curly brackets {} signify locations in the URL that need to be updated by the user based on their specific needs. I‚Äôm curious about visitor use in my birth year, so let‚Äôs tweak the URL to access visitation data from 1992. In R, we can access this data using httr‚Äôs GET() function, replacing {YEAR} with 1992. raw_data &lt;- httr::GET(url = &quot;https://irmaservices.nps.gov/v3/rest/stats/total/1992&quot;) # view raw_data # View(raw_data) Viewing the data set as-is, you can see it is not super human-readable. This is because data sent from APIs is typically packaged using JavaScript Object Notation (JSON). To unpack the data, we will first need to use httr‚Äôs content() function. In this example, we want the data to be extracted as text, since this is a data table. Moreover, its encoding is listed as UTF-8. The encoding parameter can be found by opening our raw data set in our R console: raw_data # lists &#39;UTF-8&#39; ## Response [https://irmaservices.nps.gov/v3/rest/stats/total/1992] ## Date: 2023-03-01 18:01 ## Status: 200 ## Content-Type: application/json; charset=utf-8 ## Size: 1.42 kB # convert content to text unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) Second, we need to transform this string of text, which is still in JSON formatting, into a data frame using jsonlite‚Äôs fromJSON(): # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(unpacked_data) final_data ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 6209285 10940618 NA NA 1992 ## 2 2 6010027 11931340 NA NA 1992 ## 3 3 6756902 15369139 NA NA 1992 ## 4 4 7255782 21458739 NA NA 1992 ## 5 5 7690763 26648530 NA NA 1992 ## 6 6 7593227 33284625 NA NA 1992 ## 7 7 8438755 41099305 NA NA 1992 ## 8 8 8056823 38625804 NA NA 1992 ## 9 9 7329755 26438266 NA NA 1992 ## 10 10 7105574 23616057 NA NA 1992 ## 11 11 6507805 14338165 NA NA 1992 ## 12 12 6702698 10943961 NA NA 1992 Hooray, you have now successfully pulled in an online data set using an API! üòÅ 1.2.1 Exercise #1 Using the code above as a starting point, pull in monthly NPS-wide visitation data for the years 1980, 1999, and 2018. raw_data &lt;- httr:: GET( url = &quot;https://irmaservices.nps.gov/v3/rest/stats/total/1980&quot; ) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) final_data ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 5889356 7460393 NA NA 1980 ## 2 2 5445680 7710887 NA NA 1980 ## 3 3 5805470 11218075 NA NA 1980 ## 4 4 6645552 16022120 NA NA 1980 ## 5 5 6731887 20835342 NA NA 1980 ## 6 6 6803950 26744946 NA NA 1980 ## 7 7 7475505 37275095 NA NA 1980 ## 8 8 6958916 34175930 NA NA 1980 ## 9 9 7088831 20747489 NA NA 1980 ## 10 10 7095629 18109926 NA NA 1980 ## 11 11 6646680 11495645 NA NA 1980 ## 12 12 7273415 8667363 NA NA 1980 raw_data &lt;- httr:: GET( url = &quot;https://irmaservices.nps.gov/v3/rest/stats/total/1999&quot; ) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) final_data ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 11250423 10791315 NA NA 1999 ## 2 2 10680926 12526727 NA NA 1999 ## 3 3 12121612 17326973 NA NA 1999 ## 4 4 12356338 23327872 NA NA 1999 ## 5 5 13089518 27994468 NA NA 1999 ## 6 6 12832664 33496802 NA NA 1999 ## 7 7 13677895 42072518 NA NA 1999 ## 8 8 13044805 38013029 NA NA 1999 ## 9 9 12413966 27748261 NA NA 1999 ## 10 10 13097896 24341909 NA NA 1999 ## 11 11 12557324 16852702 NA NA 1999 ## 12 12 12041632 12638303 NA NA 1999 raw_data &lt;- httr:: GET( url = &quot;https://irmaservices.nps.gov/v3/rest/stats/total/2018&quot; ) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) final_data ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 13712113 12635938 NA NA 2018 ## 2 2 12830242 13822694 NA NA 2018 ## 3 3 14575360 21035485 NA NA 2018 ## 4 4 14265408 25889186 NA NA 2018 ## 5 5 14190347 32211085 NA NA 2018 ## 6 6 14872373 39331983 NA NA 2018 ## 7 7 15334272 44636360 NA NA 2018 ## 8 8 14900808 39182620 NA NA 2018 ## 9 9 14251591 31323509 NA NA 2018 ## 10 10 14059432 26474952 NA NA 2018 ## 11 11 13645350 17774444 NA NA 2018 ## 12 12 13693455 13893577 NA NA 2018 1.2.2 Exercise #2 Now, let‚Äôs explore the second NPS visitation data set, visitation. This call pulls in monthly data for a specific park, across a specific time frame. Use your new API skills to pull in visitation data for Rocky Mountain National Park from 2010 through 2021, based on the API‚Äôs URL template. The unit code for Rocky Mountain National Park is ROMO. (Hint: an API URL can have multiple sections that need to be updated by the user.) raw_data &lt;- httr:: GET( url = &quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=ROMO&amp;startMonth=01&amp;startYear=2010&amp;endMonth=01&amp;endYear=2021&quot; ) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) final_data ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 9833 64618 ROMO Rocky Mountain NP 2010 ## 2 2 6835 44576 ROMO Rocky Mountain NP 2010 ## 3 3 6778 70117 ROMO Rocky Mountain NP 2010 ## 4 4 6737 69097 ROMO Rocky Mountain NP 2010 ## 5 5 11780 180710 ROMO Rocky Mountain NP 2010 ## 6 6 22443 441738 ROMO Rocky Mountain NP 2010 ## 7 7 30683 668418 ROMO Rocky Mountain NP 2010 ## 8 8 29990 574638 ROMO Rocky Mountain NP 2010 ## 9 9 22514 461942 ROMO Rocky Mountain NP 2010 ## 10 10 10845 245770 ROMO Rocky Mountain NP 2010 ## 11 11 7714 67862 ROMO Rocky Mountain NP 2010 ## 12 12 6474 66335 ROMO Rocky Mountain NP 2010 ## 13 1 8131 68641 ROMO Rocky Mountain NP 2011 ## 14 2 6085 50540 ROMO Rocky Mountain NP 2011 ## 15 3 7229 73760 ROMO Rocky Mountain NP 2011 ## 16 4 5940 77183 ROMO Rocky Mountain NP 2011 ## 17 5 10025 163587 ROMO Rocky Mountain NP 2011 ## 18 6 27264 500733 ROMO Rocky Mountain NP 2011 ## 19 7 29070 743741 ROMO Rocky Mountain NP 2011 ## 20 8 25498 620534 ROMO Rocky Mountain NP 2011 ## 21 9 22179 483780 ROMO Rocky Mountain NP 2011 ## 22 10 9157 264617 ROMO Rocky Mountain NP 2011 ## 23 11 6514 68076 ROMO Rocky Mountain NP 2011 ## 24 12 11581 61749 ROMO Rocky Mountain NP 2011 ## 25 1 90 68537 ROMO Rocky Mountain NP 2012 ## 26 2 50 62036 ROMO Rocky Mountain NP 2012 ## 27 3 80 104374 ROMO Rocky Mountain NP 2012 ## 28 4 70 117053 ROMO Rocky Mountain NP 2012 ## 29 5 490 228950 ROMO Rocky Mountain NP 2012 ## 30 6 1400 500206 ROMO Rocky Mountain NP 2012 ## 31 7 2050 651722 ROMO Rocky Mountain NP 2012 ## 32 8 2300 589131 ROMO Rocky Mountain NP 2012 ## 33 9 1500 527172 ROMO Rocky Mountain NP 2012 ## 34 10 560 219946 ROMO Rocky Mountain NP 2012 ## 35 11 100 93714 ROMO Rocky Mountain NP 2012 ## 36 12 60 66776 ROMO Rocky Mountain NP 2012 ## 37 1 90 78022 ROMO Rocky Mountain NP 2013 ## 38 2 50 68831 ROMO Rocky Mountain NP 2013 ## 39 3 80 89691 ROMO Rocky Mountain NP 2013 ## 40 4 70 90379 ROMO Rocky Mountain NP 2013 ## 41 5 490 239184 ROMO Rocky Mountain NP 2013 ## 42 6 1400 602508 ROMO Rocky Mountain NP 2013 ## 43 7 2050 712583 ROMO Rocky Mountain NP 2013 ## 44 8 2300 621852 ROMO Rocky Mountain NP 2013 ## 45 9 1500 253467 ROMO Rocky Mountain NP 2013 ## 46 10 560 66275 ROMO Rocky Mountain NP 2013 ## 47 11 100 86379 ROMO Rocky Mountain NP 2013 ## 48 12 60 81970 ROMO Rocky Mountain NP 2013 ## 49 1 90 77633 ROMO Rocky Mountain NP 2014 ## 50 2 50 76881 ROMO Rocky Mountain NP 2014 ## 51 3 80 99077 ROMO Rocky Mountain NP 2014 ## 52 4 70 97100 ROMO Rocky Mountain NP 2014 ## 53 5 490 220532 ROMO Rocky Mountain NP 2014 ## 54 6 1400 538725 ROMO Rocky Mountain NP 2014 ## 55 7 2050 693685 ROMO Rocky Mountain NP 2014 ## 56 8 2300 616826 ROMO Rocky Mountain NP 2014 ## 57 9 1500 537694 ROMO Rocky Mountain NP 2014 ## 58 10 560 305651 ROMO Rocky Mountain NP 2014 ## 59 11 100 90915 ROMO Rocky Mountain NP 2014 ## 60 12 60 80032 ROMO Rocky Mountain NP 2014 ## 61 1 90 98928 ROMO Rocky Mountain NP 2015 ## 62 2 50 85123 ROMO Rocky Mountain NP 2015 ## 63 3 80 134304 ROMO Rocky Mountain NP 2015 ## 64 4 70 116959 ROMO Rocky Mountain NP 2015 ## 65 5 490 259711 ROMO Rocky Mountain NP 2015 ## 66 6 1400 608796 ROMO Rocky Mountain NP 2015 ## 67 7 2050 858426 ROMO Rocky Mountain NP 2015 ## 68 8 2300 765579 ROMO Rocky Mountain NP 2015 ## 69 9 1500 644350 ROMO Rocky Mountain NP 2015 ## 70 10 560 371558 ROMO Rocky Mountain NP 2015 ## 71 11 100 118398 ROMO Rocky Mountain NP 2015 ## 72 12 60 93784 ROMO Rocky Mountain NP 2015 ## 73 1 90 115207 ROMO Rocky Mountain NP 2016 ## 74 2 50 105125 ROMO Rocky Mountain NP 2016 ## 75 3 80 135053 ROMO Rocky Mountain NP 2016 ## 76 4 70 129967 ROMO Rocky Mountain NP 2016 ## 77 5 490 285868 ROMO Rocky Mountain NP 2016 ## 78 6 1400 700990 ROMO Rocky Mountain NP 2016 ## 79 7 2050 912507 ROMO Rocky Mountain NP 2016 ## 80 8 2300 772849 ROMO Rocky Mountain NP 2016 ## 81 9 1500 711110 ROMO Rocky Mountain NP 2016 ## 82 10 560 398525 ROMO Rocky Mountain NP 2016 ## 83 11 100 158553 ROMO Rocky Mountain NP 2016 ## 84 12 60 91831 ROMO Rocky Mountain NP 2016 ## 85 1 90 95602 ROMO Rocky Mountain NP 2017 ## 86 2 50 98832 ROMO Rocky Mountain NP 2017 ## 87 3 80 145110 ROMO Rocky Mountain NP 2017 ## 88 4 70 158360 ROMO Rocky Mountain NP 2017 ## 89 5 490 263222 ROMO Rocky Mountain NP 2017 ## 90 6 1400 741247 ROMO Rocky Mountain NP 2017 ## 91 7 2050 885478 ROMO Rocky Mountain NP 2017 ## 92 8 2300 782625 ROMO Rocky Mountain NP 2017 ## 93 9 1500 681160 ROMO Rocky Mountain NP 2017 ## 94 10 560 332526 ROMO Rocky Mountain NP 2017 ## 95 11 100 140223 ROMO Rocky Mountain NP 2017 ## 96 12 60 112830 ROMO Rocky Mountain NP 2017 ## 97 1 90 111422 ROMO Rocky Mountain NP 2018 ## 98 2 50 84245 ROMO Rocky Mountain NP 2018 ## 99 3 80 156434 ROMO Rocky Mountain NP 2018 ## 100 4 70 151975 ROMO Rocky Mountain NP 2018 ## 101 5 490 305993 ROMO Rocky Mountain NP 2018 ## 102 6 1400 720822 ROMO Rocky Mountain NP 2018 ## 103 7 2050 931929 ROMO Rocky Mountain NP 2018 ## 104 8 2300 798306 ROMO Rocky Mountain NP 2018 ## 105 9 1500 784480 ROMO Rocky Mountain NP 2018 ## 106 10 560 312757 ROMO Rocky Mountain NP 2018 ## 107 11 100 125349 ROMO Rocky Mountain NP 2018 ## 108 12 60 106781 ROMO Rocky Mountain NP 2018 ## 109 1 90 118152 ROMO Rocky Mountain NP 2019 ## 110 2 50 99873 ROMO Rocky Mountain NP 2019 ## 111 3 80 146414 ROMO Rocky Mountain NP 2019 ## 112 4 70 160259 ROMO Rocky Mountain NP 2019 ## 113 5 490 280351 ROMO Rocky Mountain NP 2019 ## 114 6 1400 698224 ROMO Rocky Mountain NP 2019 ## 115 7 2050 973992 ROMO Rocky Mountain NP 2019 ## 116 8 2300 830039 ROMO Rocky Mountain NP 2019 ## 117 9 1500 752320 ROMO Rocky Mountain NP 2019 ## 118 10 560 374003 ROMO Rocky Mountain NP 2019 ## 119 11 100 123376 ROMO Rocky Mountain NP 2019 ## 120 12 60 113050 ROMO Rocky Mountain NP 2019 ## 121 1 90 126866 ROMO Rocky Mountain NP 2020 ## 122 2 50 110667 ROMO Rocky Mountain NP 2020 ## 123 3 80 97690 ROMO Rocky Mountain NP 2020 ## 124 4 70 0 ROMO Rocky Mountain NP 2020 ## 125 5 490 63051 ROMO Rocky Mountain NP 2020 ## 126 6 1400 491355 ROMO Rocky Mountain NP 2020 ## 127 7 2050 723478 ROMO Rocky Mountain NP 2020 ## 128 8 2300 580368 ROMO Rocky Mountain NP 2020 ## 129 9 1500 500019 ROMO Rocky Mountain NP 2020 ## 130 10 560 297665 ROMO Rocky Mountain NP 2020 ## 131 11 100 157875 ROMO Rocky Mountain NP 2020 ## 132 12 60 156165 ROMO Rocky Mountain NP 2020 ## 133 1 90 140715 ROMO Rocky Mountain NP 2021 1.3 Functions You may find yourself thinking, ‚ÄúWow, exercise 1 was overkill!‚Äù Indeed, you had to run several lines of code that were nearly identical to what was shown upstream; the only thing you needed to change from one year to the next was the year itself. This sort of redundant coding is not good coding practice. Instead of copying and pasting many coding steps over and over again and tweaking just a tiny portion of it, we can write functions that combine many coding steps into just one command. The benefits of reducing redundant code in this way are threefold. As Grolemund &amp; Wickham describe in their book, R for Data Science: It‚Äôs easier to see the intent of your code, because your eyes are drawn to what‚Äôs different, not what stays the same. It‚Äôs easier to respond to changes in requirements. As your needs change, you only need to make changes in one place, rather than remembering to change every place that you copied-and-pasted the code. You‚Äôre likely to have fewer bugs because each line of code is used in more places. Functions provide the option of changing just a minor part of the code base from one run to the next. Think of the GET() function in httr: it is a function that has code under-the-hood so that it isn‚Äôt necessary to write out the raw code each time we use it. Instead, we call out the function‚Äôs name (GET()), and the necessary argument within that function that tweaks the code to fit it to our needs (url = \"&lt;SOME_URL_WE_CHOOSE&gt;\"). 1.4 Functionize API Pulls Let‚Äôs try making a function called parkwide_visitation() that pulls in NPS-wide visitation data for a year of choice. To develop a function requires specific formatting: parkwide_visitation &lt;- function(year = 2022){ raw_data &lt;- GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;,year)) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) return(final_data) } test &lt;- parkwide_visitation( year = 1994) ‚Ä¶ where NAME is what we want to name the function; ARGUMENTS are the variables in the code that get ‚Äútweaked‚Äù; ACTIONS are the lines of code we want the function to perform (which includes our ARGUMENTS); and the OUTPUT is the object we want as the final outcome of running the function. For parkwide_visitation(), we will use our upstream code as the basis for our function, but with a few minor yet extremely important tweaks: parkwide_visitation &lt;- function(year){ # pull in the data raw_data &lt;- httr::GET(url = # parse out year so that it can be chosen with the &quot;year&quot; argument, using paste0() paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) # convert content to text extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data) } In the above function, our first object, raw_data, now changes based on how we define our year argument. We accomplish this through paste0(), which takes listed objects, transforms them into characters (if they aren‚Äôt already), and concatenates them into a single character string. For example: my_sentence &lt;- &quot;I need at least&quot; my_other_sentence &lt;- &quot;pints of ice cream a day&quot; paste0(my_sentence, &quot; &quot;, 08, &quot; &quot;, my_other_sentence, &quot;!&quot;) ## [1] &quot;I need at least 8 pints of ice cream a day!&quot; So, if we make year = 2021 in our parkwide_visitation() function, the year object becomes the number 2021, which makes the paste0() output ‚Äúhttps://irmaservices.nps.gov/v3/rest/stats/total/2021‚Äù, which subsequently pulls data for 2021. In other words, we can now pull visitation data for any year with just one line of code! pull_2018 &lt;- parkwide_visitation(year = 2018) pull_1980 &lt;- parkwide_visitation(year = 1980) pull_1992 &lt;- parkwide_visitation(year = 1992) # ... and so on! 1.4.1 Exercise #3 Create a function called unit_visitation() that pulls park-specific visitation data for any park, across any time frame. For a list of all park codes, download this spreadsheet. (Hint 1: functions can have multiple arguments. Hint 2: what‚Äôs the difference between 05 and \"05\"?) unit_visitation &lt;- function(UNITCODE = &quot;ROMO&quot;, STARTMONTH = 01, STARTYEAR = 2010, ENDMONTH = 12, ENDYEAR = 2022){ raw_data &lt;- GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=&quot;,UNITCODE,&quot;&amp;startMonth=&quot;,STARTMONTH,&quot;&amp;startYear=&quot;,STARTYEAR,&quot;&amp;endMonth=&quot;,ENDMONTH,&quot;&amp;endYear=&quot;,ENDYEAR)) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) return(final_data) } test &lt;- unit_visitation(UNITCODE = &quot;ACAD&quot;, STARTMONTH = 04, STARTYEAR = 2020, ENDMONTH = 04, ENDYEAR = 2021) 1.4.2 Exercise #4 Using unit_visitation(), pull in visitation data for Rocky Mountain National Park (ROMO), Everglades National Park (EVER), and Theodore Roosevelt National Park (THRO) from 1990 through 2021. pullROMO &lt;- unit_visitation(UNITCODE = &quot;ROMO&quot;, STARTMONTH = 01, STARTYEAR = 1990, ENDMONTH = 12, ENDYEAR = 2021) pullEVER &lt;- unit_visitation(UNITCODE = &quot;EVER&quot;, STARTMONTH = 01, STARTYEAR = 1990, ENDMONTH = 12, ENDYEAR = 2021) pullTHRO &lt;- unit_visitation(UNITCODE = &quot;THRO&quot;, STARTMONTH = 01, STARTYEAR = 1990, ENDMONTH = 12, ENDYEAR = 2021) 1.5 Function Defaults Look at the code that you just wrote; writing out all of those unchanging date arguments still feels repetitive, right? When developing functions, there is an option for setting default values for arguments so that you don‚Äôt necessarily have to write all of them out every time you run it in the future. But, the option still exists within the function to make changes when necessary. For example, let‚Äôs tweak our parkwide_visitaion() function to have the default year be 2021: parkwide_visitation &lt;- function(year = &quot;2021&quot;) { raw_data &lt;- httr::GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) # convert content to text extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data) } parkwide_visitation() ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 11632614 11978413 NA NA 2021 ## 2 2 11082899 11692967 NA NA 2021 ## 3 3 12981524 18370611 NA NA 2021 ## 4 4 12857567 22155245 NA NA 2021 ## 5 5 13250575 27963739 NA NA 2021 ## 6 6 13789961 36122392 NA NA 2021 ## 7 7 14734920 41329530 NA NA 2021 ## 8 8 14280304 35380986 NA NA 2021 ## 9 9 13382939 30204635 NA NA 2021 ## 10 10 13882165 26961779 NA NA 2021 ## 11 11 13192146 18903397 NA NA 2021 ## 12 12 13007065 16051712 NA NA 2021 Because the default year is 2021, you don‚Äôt have to write it out explicitly in the function (so long as that‚Äôs the year you‚Äôre interested in). But, you still have the option of changing the year to something else: parkwide_visitation(year = &quot;1992&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 6209285 10940618 NA NA 1992 ## 2 2 6010027 11931340 NA NA 1992 ## 3 3 6756902 15369139 NA NA 1992 ## 4 4 7255782 21458739 NA NA 1992 ## 5 5 7690763 26648530 NA NA 1992 ## 6 6 7593227 33284625 NA NA 1992 ## 7 7 8438755 41099305 NA NA 1992 ## 8 8 8056823 38625804 NA NA 1992 ## 9 9 7329755 26438266 NA NA 1992 ## 10 10 7105574 23616057 NA NA 1992 ## 11 11 6507805 14338165 NA NA 1992 ## 12 12 6702698 10943961 NA NA 1992 1.5.1 Exercise #5 Default our unit_visitation() function‚Äôs arguments related to the starting and ending months to January and December, respectively. This way, we are automatically pulling in data for entire years. Rerun the function for ROMO, EVER, and THRO for the 1980-2021 time period to make sure it works properly. unit_visitation &lt;- function(UNITCODE = &quot;ROMO&quot;, STARTMONTH = 01, STARTYEAR = 1980, ENDMONTH = 12, ENDYEAR = 2021){ raw_data &lt;- GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=&quot;,UNITCODE,&quot;&amp;startMonth=&quot;,STARTMONTH,&quot;&amp;startYear=&quot;,STARTYEAR,&quot;&amp;endMonth=&quot;,ENDMONTH,&quot;&amp;endYear=&quot;,ENDYEAR)) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) return(final_data) } test &lt;- unit_visitation(UNITCODE = &quot;ACAD&quot;) tail(test) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 499 7 7500 782146 ACAD Acadia NP 2021 ## 500 8 7500 795437 ACAD Acadia NP 2021 ## 501 9 7500 667301 ACAD Acadia NP 2021 ## 502 10 6000 557624 ACAD Acadia NP 2021 ## 503 11 600 81089 ACAD Acadia NP 2021 ## 504 12 600 14381 ACAD Acadia NP 2021 1.6 Iterations At this point, we now know how to develop functions so that we do not have to keep writing out redundant steps in a workflow. However, in that last exercise, you can see that we are still writing out redundant code; we are performing the exact same function on each of our three park units. Another tool for reducing redundancy is iteration, which allows you to do the same thing on multiple inputs. Iteration can happen across different objects, different rows, different data frames, the list goes on and on! 1.7 For loops A for loop is base R‚Äôs iteration tool that executes code across a vector, an array, a list, etc. To save the outcome of each iteration, you must first create a vector to store the outputs in that is sized based on how many objects you want to iterate over. For example, I want to run our parkwide_visitation() function over the last five years: 2017, 2018, 2019, 2020, and 2021. To do that, I will first need to develop a vector listing each year: years &lt;- c(&#39;2017&#39;, &#39;2018&#39;, &#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;) ‚Ä¶ and then develop an empty list to store each year‚Äôs parkwide_visitation() results (i.e., output) into: output_floop &lt;- vector(&quot;list&quot;, length = length(years)) Now that we have a place to store each year‚Äôs function results, we can move forward with the for loop itself: for(i in 1:length(years)){ output_floop[[i]] &lt;- parkwide_visitation(year = years[i]) } ‚Ä¶ where years[i] tells the for loop to perform parkwide_visitation() on the ith year (think of i as a moving across each year), and output_floop[[i]] directs the for loop to store the results of the ith year‚Äôs run into output‚Äôs ith list (think of output_floop[[i]] as the location in output_floop that the ith‚Äôs results go). We now have a list containing five data frames: one for each year of visitation data: summary(output_floop) ## Length Class Mode ## [1,] 6 data.frame list ## [2,] 6 data.frame list ## [3,] 6 data.frame list ## [4,] 6 data.frame list ## [5,] 6 data.frame list Because each year‚Äôs output is structured identically, we can confidently combine each year‚Äôs data frame into a single data frame using dplyr::bind_rows(): multi_years &lt;- dplyr::bind_rows(output_floop) 1.7.1 Exercise #6 Use a for loop to run unit_visitation() with arguments start_year = 1980 and end_year = 2021 across ROMO, EVER, and THRO. Then, create a single data frame containing each park units‚Äô output. (Hint: Your first step will be to create a vector listing each park unit.) parks &lt;- c(&quot;ROMO&quot;,&quot;EVER&quot;, &quot;THRO&quot;) output_floop &lt;- vector(&quot;list&quot;, length = length(parks)) for(i in 1:length(parks)){ output_floop[[i]] &lt;- unit_visitation(UNITCODE = parks[i]) } #summary(output_floop) multi_parks &lt;- dplyr::bind_rows(output_floop) 1.8 Mapping The tidyverse‚Äôs purrr package has its own iteration function, map(), that is a variation of the for loop. map() takes a vector and applies a single function across it, then automatically stores all of the results into a list. In other words, map() creates an appropriately sized list to store our results in for us. This eliminates the need to create an empty list ahead of time. To create the same output as our previous for loop on parkwide_visitation(), but using map() instead, we would run the following code: output_map &lt;- years %&gt;% map(~ parkwide_visitation(year = .)) ‚Ä¶ where ~ indicates that we want to perform parkwide_visitation() across all years, and . indicates that we want to use our piped vector, years, as the input to the year argument. As you can see, output_map is identical to output_floop: identical(output_floop, output_map) ## [1] FALSE ‚Ä¶ which means we should also bind_rows() to get the mapped output into a single data frame: multi_years &lt;- bind_rows(output_map) head(multi_years) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 12932243 14341801 NA NA 2017 ## 2 2 13127341 14623099 NA NA 2017 ## 3 3 14042366 21415417 NA NA 2017 ## 4 4 14361425 27746262 NA NA 2017 ## 5 5 14501102 32144371 NA NA 2017 ## 6 6 14870864 39293938 NA NA 2017 1.8.1 Exercise #7 Use map() to run unit_visitation() with arguments start_year = 1980 and end_year = 2021 across ROMO, EVER, and THRO. Then, create a single data frame containing each park units‚Äô output. output_map &lt;- parks %&gt;% map(~ unit_visitation(UNITCODE = .)) #identical(output_floop, output_map) multi_parks &lt;- bind_rows(output_map) #head(multi_parks) #tail(multi_parks) "],["data-munging.html", "Chapter 2 Data Munging 2.1 Pulling in necessary packages and data sets 2.2 Exploring our data 2.3 Pivoting 2.4 Joining", " Chapter 2 Data Munging 2.0.1 Lesson Objectives In the last lesson, we learned how to pull data from an API and reduce redundancies in our workflows through functions and iterations. In this lesson we will use the functions in the previous lesson to learn how to manipulate data frames with the tidyverse, and plot elegant time series graphs with the ggplot(), scales and plotly packages. There are five exercises in this lesson that must be completed. 2.1 Pulling in necessary packages and data sets library(tidyverse) library(httr) library(jsonlite) library(plotly) library(scales) Using the parkwide_visitation() function from the last lesson and mapping, let‚Äôs pull park-wide visitor data from 1980-2021, and name the final object parkwide. (Code hack: we can use 1980:2021 to create a vector of years so we don‚Äôt have to write each year out!) parkwide_visitation &lt;- function(year){ raw_data &lt;- httr::GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data) } years &lt;- (1980:2021) parkwide &lt;- years %&gt;% map(~ parkwide_visitation(year = .)) %&gt;% bind_rows() 2.1.1 Exercise #1 Using the unit_visitation() function from the last lesson and mapping, pull visitor data from 1980-2021 for the following park units: ROMO, ACAD, LAKE, YELL, GRCA, ZION, OLYM, and GRSM. Name the final output units. unit_visitation &lt;- function(UNITCODE = &quot;ROMO&quot;, STARTMONTH = 01, STARTYEAR = 1980, ENDMONTH = 12, ENDYEAR = 2021){ raw_data &lt;- GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=&quot;,UNITCODE,&quot;&amp;startMonth=&quot;,STARTMONTH,&quot;&amp;startYear=&quot;,STARTYEAR,&quot;&amp;endMonth=&quot;,ENDMONTH,&quot;&amp;endYear=&quot;,ENDYEAR)) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) return(final_data) } parks &lt;- c(&quot;ROMO&quot;, &quot;ACAD&quot;, &quot;LAKE&quot;, &quot;YELL&quot;, &quot;GRCA&quot;, &quot;ZION&quot;, &quot;OLYM&quot;, &quot;GRSM&quot;) output_unit_parks &lt;- parks %&gt;% map(~ unit_visitation(UNITCODE = .)) units &lt;- bind_rows(output_unit_parks) 2.2 Exploring our data Look at the data frame structure of parkwide and units; they‚Äôre exactly the same! So let‚Äôs go ahead and bind those together: visitation &lt;- bind_rows(parkwide, units) ‚Ä¶ except, the rows in parkwide‚Äôs UnitCode and UnitCode columns are empty. üòë Let‚Äôs fix the UnitCode column to list ‚ÄúParkwide‚Äù using mutate() and an ifelse() statement: visitation &lt;- visitation %&gt;% mutate(UnitCode = ifelse(is.na(UnitCode), &quot;Parkwide&quot;, UnitCode)) visitation &lt;- visitation %&gt;% mutate(UnitName = ifelse(is.na(UnitName), &quot;Parkwide&quot;, UnitName)) Think of the above ifelse() operation as: ‚ÄúIf the column UnitCode is NA, replace NA with Parkwide. Otherwise, preserve what is already in the UnitCode column.‚Äù Now that we have a single data set containing all of the NPS visitation data that we‚Äôve pulled, let‚Äôs start exploring it! But first, let‚Äôs aggregate the monthly data into annual data using group_by() and summarize(): yearly &lt;- visitation %&gt;% group_by(UnitCode, Year) %&gt;% # we only care about recreational visitors: summarize(RecVisitation = sum(RecreationVisitors)) yearly What does visitation data look like through time? First we can try to graph all of the park units together: ggplot(data=yearly)+ geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + theme_bw(base_size=6) ‚Ä¶ yikes, not surprisingly, parkwide visitation is wayyyy higher than our individual unit‚Äôs visitation data, making our graph pretty useless. It might be nice to have each park unit in a graph of its own. We can create individual graphs for each unit using facet_wrap(), and set the y-axes for each plot to \"free_y\": ggplot(data=yearly) + geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + facet_wrap(~UnitCode, scales = &quot;free_y&quot;) + theme_bw(base_size=10) We can also make this plot interactive by feeding it into plotly‚Äôs ggplotly() function: plotly::ggplotly( ggplot(data=yearly) + geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + facet_wrap(~UnitCode, scales = &quot;free_y&quot;) + theme_bw(base_size=10) ) 2.2.1 Exercise #2 Create an interactive graph with two separate panes: one showing park-wide visitation, the other showing all the individual park units together. Both panes should have different y-axes. plotly::ggplotly( ggplot(data=yearly) + geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + facet_wrap(~UnitCode != &quot;Parkwide&quot;, scales = &quot;free_y&quot;) + theme_bw(base_size=10) ) It is pretty clear that some park units get orders of magnitude more visitors than others. But just how much of the total park visitation do each of these parks account for from year to year? Here we walk through two methods to tackle this question, pivoting and joining, to get park unit visitation side-by-side with park-wide data. 2.3 Pivoting Currently, our yearly data is considered narrow because we have all of our NPS visitation data in one column, with multiple rows representing the same year. We can make this data wide by using the function pivot_wider() wide_data &lt;- yearly %&gt;% select(Year, UnitCode, RecVisitation) %&gt;% pivot_wider(., names_from = UnitCode, values_from = RecVisitation) ‚Ä¶ where names_from represents the column with the values you are hoping to spread into new columns, and values_from represents the data you want to fill these new columns with. We can make the data set narrow again by using the function pivot_longer(): narrow_data &lt;- wide_data %&gt;% pivot_longer(cols = -Year, names_to = &quot;Park&quot;, values_to = &quot;RecVisitation&quot;) ‚Ä¶ where cols are the columns we want to gather into one column (or, the column(s) you DON‚ÄôT want to gather), while names_to and values_to are the names of the new columns produced from the pivot. 2.3.1 Exercise #3 Using wide_data as the starting point, create an interactive time series plot showing the annual percentage of the total visitation made up by all park units. wide_percent &lt;- wide_data %&gt;% mutate(ACAD = ACAD/Parkwide*100) %&gt;% mutate(ROMO = ROMO/Parkwide*100) %&gt;% mutate(YELL = YELL/Parkwide*100) %&gt;% mutate(GRCA = GRCA/Parkwide*100) %&gt;% mutate(ZION = ZION/Parkwide*100) %&gt;% mutate(OLYM = OLYM/Parkwide*100) %&gt;% mutate(LAKE = LAKE/Parkwide*100) %&gt;% mutate(GRSM = GRSM/Parkwide*100) narrow_percent &lt;- wide_percent %&gt;% select(- Parkwide) %&gt;% pivot_longer(cols = -Year, names_to = &quot;Park&quot;, values_to = &quot;RecVisitation&quot;) plotly::ggplotly(ggplot( data = narrow_percent, mapping = aes( x = Year, y = RecVisitation, fill = (reorder(Park, RecVisitation)) ) ) + geom_col(position = &quot;stack&quot;)+ labs(title = &quot;Annual Percentage of Total Visitation by Park&quot;, y = &quot;Percentage of total visitation&quot;)+ guides(label = FALSE) #how tf do you change the legend title? ) # # ggplot(data=narrow_percent, mapping = aes(x = Year, y = RecVisitation))+ # geom_col(data=narrow_percent, fill = Park)) 2.4 Joining Another way of getting park-wide visitation side-by-side with the park unit data is through the use of joining our original units and parkwide data sets: joined_data &lt;- inner_join(x = units, y = parkwide, by = c(&quot;Year&quot;,&quot;Month&quot;)) ‚Ä¶ where x and y are the two data sets you want joined, and by indicates the column(s) to match them by. Note: there are several ways of joining data. Explore them with ?`mutate-joins` and ?`filter-joins`. 2.4.1 Exercise #4 Using joined_data as the starting point, create an interactive time series plot showing the annual percentage of the total visitation made up by all park units. This plot should look nearly identical to the previous plot. joined_percent_data &lt;- joined_data %&gt;% rename(&quot;Park&quot; = &quot;UnitCode.x&quot;) %&gt;% group_by(Park, Year) %&gt;% summarise(Unit_Rec_Visitors = sum(RecreationVisitors.x), Parkwide_Rec_Visitors = sum(RecreationVisitors.y)) %&gt;% mutate(percent_of_total = (Unit_Rec_Visitors/Parkwide_Rec_Visitors*100)) %&gt;% select(c(Year, Park, percent_of_total)) plotly::ggplotly(ggplot( data = joined_percent_data, mapping = aes( x = Year, y = percent_of_total, fill = (reorder(Park, percent_of_total)) ) ) + geom_col(position = &quot;stack&quot;)) 2.4.2 Exercise #5 Which park on average has the most visitation? Which park has the least visitation? Base your response on the data starting in 1990, ending in 2021. Defend your answer with numbers! park_t &lt;- joined_percent_data %&gt;% filter(Year &gt; 1989 &amp; Year &lt;=2021) sumstats &lt;- park_t %&gt;% group_by(Park) %&gt;% summarise( n = n(), mean = mean(percent_of_total), sd = sd(percent_of_total), se = sd / sqrt(n)) sumstats GRSM had the highest average visitation during that period (3.5% of total NP visitation) and ACAD had the least average visitation (0.92% of total). FIN "],["denouement.html", "Chapter 3 Denouement 3.1 Lesson Objectives: 3.2 Streaflow Datasets 3.3 Exercise #1 3.4 Exercise #2 3.5 Exercise #3 3.6 Exercise #4 3.7 Exercise #5", " Chapter 3 Denouement 3.1 Lesson Objectives: In this lesson you will take all of the skills you have learned up to this point and use them on a completely new set of data. This lesson has five exercises that need to be completed. 3.1.0.1 Necessary packages: library(tidyverse) library(plotly) library(scales) library(httr) library(jsonlite) library(dataRetrieval) library(sf) # for the map library(mapview) # for making the interactive plot 3.2 Streaflow Datasets We are interested in looking at how the Cache la Poudre River‚Äôs flow changes as it travels out of the mountainous Poudre Canyon and through Fort Collins. There are four stream flow monitoring sites on the Poudre that we are interested in: two managed by the US Geological Survey (USGS), and two managed by the Colorado Division of Water Resources (CDWR): 3.2.1 USGS dataRetrieval R package To pull data for USGS stream gages, we can use the dataRetrieval package, which is a USGS-managed set of functions that, much like our functions from Lesson 3.1, pull data from the USGS‚Äôs data warehouse using an API. Here we will pull flow data for our USGS stream gages of interest for the last two water years: # pulls USGS daily (&#39;dv&#39;) stream flow data: usgs &lt;- dataRetrieval::readNWISdv(siteNumbers = c(&quot;06752260&quot;, &quot;06752280&quot;), # USGS site code for the Poudre River at the Lincoln Bridge and the ELC parameterCd = &quot;00060&quot;, # USGS code for stream flow startDate = &quot;2020-10-01&quot;, # YYYY-MM-DD formatting endDate = &quot;2022-09-30&quot;) %&gt;% # YYYY-MM-DD formatting rename(q_cfs = X_00060_00003) %&gt;% # USGS code for stream flow units in cubic feet per second (CFS) mutate(Date = lubridate::ymd(Date), # convert the Date column to &quot;Date&quot; formatting using the `lubridate` package Site = case_when(site_no == &quot;06752260&quot; ~ &quot;Lincoln&quot;, site_no == &quot;06752280&quot; ~ &quot;Boxelder&quot;)) 3.2.2 CDWR‚Äôs API Alas, CDWR does NOT have an R package that pulls data from their API, but they do have user-friendly directions on how to develop API calls. Using the ‚ÄúURL generator‚Äù steps outlined for their daily surface water time series data set, we can get the last two water years of CFS data for the Poudre at the Canyon mouth (site abbreviation = CLAFTCCO) using the following URL: https://dwr.state.co.us/Rest/GET/api/v2/surfacewater/surfacewatertsday/?format=json&amp;dateFormat=dateOnly&amp;fields=abbrev%2CmeasDate%2Cvalue%2CmeasUnit&amp;encoding=deflate&amp;abbrev=CLAFTCCO&amp;min-measDate=10%2F01%2F2020&amp;max-measDate=09%2F30%2F2022 3.3 Exercise #1 Using the URL above as the starting point, develop a function that creates a data frame of CDWR daily flow (CFS) data for a selected range of water years, for any site. (HINT: The final product of our API pull is a list with additional metadata about our API pull‚Ä¶ how do we index a list to extract the time series flow data?) co_water_data &lt;- function(site, start_wyear, end_wyear){ raw_data = GET(url = paste0(&quot;https://dwr.state.co.us/Rest/GET/api/v2/&quot;, &quot;surfacewater/surfacewatertsday/?format=json&amp;dateFormat=dateOnly&amp;fields&quot;, &quot;=abbrev%2CmeasDate%2Cvalue%2CmeasUnit&amp;encoding=deflate&amp;abbrev=&quot;, site, &quot;&amp;min-measDate=10%2F01%2F&quot;,start_wyear - 1,&quot;&amp;max-measDate=09%2F30%2F&quot;,end_wyear)) # convert content to text extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data[[5]]) } test &lt;- co_water_data(&quot;CLAFTCCO&quot;, 2020 , 2022 ) test 3.4 Exercise #2 Map over the function you developed in Exercise #1 to pull flow data for CLAFTCCO and CLARIVCO for the 2021 and 2022 water years. sites &lt;- c(&quot;CLAFTCCO&quot;, &quot;CLARIVCO&quot;) output_floop &lt;- vector(&quot;list&quot;, length = length(sites)) for (i in 1:length(sites)) { raw_data &lt;- co_water_data(sites[i], 2021 , 2022) output_floop[[i]] &lt;- raw_data } multi_sites &lt;- dplyr::bind_rows(output_floop) #Change formatting of columns to match USGS, add site column multi_poudre_sites &lt;- subset(multi_sites, select = -c(measUnit)) %&gt;% rename(site_no = abbrev, q_cfs = value) %&gt;% mutate( agency_cd = &quot;CDWR&quot;, Date = lubridate::ymd(measDate), Site = case_when( site_no == &quot;CLAFTCCO&quot; ~ &quot;Canyon_mouth&quot;, site_no == &quot;CLARIVCO&quot; ~ &quot;Below_Fossil_Creek_Reservoir&quot; ) ) #remove extra date column multi_poudre_sites &lt;- subset(multi_poudre_sites, select = -c(measDate)) 3.5 Exercise #3 Join our USGS and CDWR data frames together (bind_rows(), perhaps?), then create an interactive ggplot of discharge (in CFS) through time displaying all four of our monitoring sites. Be sure all axes and labels are clear. # this removed a random column from usgs so that bind rows would work with both df having exact same column names usgs_for_bind &lt;- subset(usgs, select = -c(X_00060_00003_cd)) output_vector &lt;- vector(&quot;list&quot;, length = 2) output_vector[[1]] &lt;- usgs_for_bind output_vector[[2]] &lt;- multi_poudre_sites all_sites &lt;- dplyr::bind_rows(output_vector) p3 &lt;- plotly::ggplotly( ggplot(all_sites, mapping = aes(x = Date, y = q_cfs)) + geom_line(aes(color = Site)) + facet_wrap( ~ Site, ncol = 1) + labs(title = &quot;2021-2022 Poudre Discharge &quot;, y = &quot;Discharge (cubic feet per second)&quot;)+ theme(legend.position = &quot;none&quot;)+#why wont this go where i need it to? theme(panel.spacing = unit(1, &quot;lines&quot;)) ) p3 3.6 Exercise #4 Create an interactive plot of the daily difference in discharge between the Cache la Poudre River at the canyon mouth and each of the sites downstream. Make sure your plot axes are clear. wide_all_sites &lt;- all_sites %&gt;% select(Date, q_cfs, Site) %&gt;% pivot_wider(., names_from = Site, values_from = q_cfs) %&gt;% group_by(Date) %&gt;% mutate(Lincoln_diff = Canyon_mouth - Lincoln, Boxelder_diff = Canyon_mouth - Boxelder, Below_Fossil_Creek_Reservoir_diff = Canyon_mouth - Below_Fossil_Creek_Reservoir) %&gt;% select(Lincoln_diff,Boxelder_diff, Below_Fossil_Creek_Reservoir_diff) narrow_plot4 &lt;- wide_all_sites %&gt;% pivot_longer(cols = -Date, names_to = &quot;Site&quot;, values_to = &quot;Diff_q_cfs&quot;) #narrow_plot4 p4 &lt;- plotly::ggplotly(ggplot(narrow_plot4, mapping = aes( x = Date, y = Diff_q_cfs ), color = Site ) + geom_line(aes(color = Site))+ facet_wrap( ~ Site, ncol = 1)+ labs(title = &quot;Site Discharge Difference from Mouth of Poudre Canyon &quot;, y = &quot;Difference in Discharge (cubic feet per second)&quot;)+ theme(legend.position = &quot;none&quot;) ) p4 3.7 Exercise #5 For each of our downstream locations, calculate how many days the canyon mouth had LOWER flow. Is this what you expected? Why or why not? narrow_plot4 &lt;- narrow_plot4 %&gt;% mutate(Lower_mouth_discharge = ifelse(Diff_q_cfs &lt; 0 , &quot;True&quot;, &quot;False&quot;)) sumStat &lt;- narrow_plot4 %&gt;% group_by(Site) %&gt;% count(Lower_mouth_discharge) sumStat Of the 2021 and 2022 water years, there was lower discharge at the canyon mouth for 38, 8, and 59 days at the monitoring sites below fossil creek reservoir, Boxelder (ELC), and Lincoln Bridge respectively "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
